STORED PROCEDURE

-> COSTO:

ALTER PROCEDURE [dbo].[Costos_Agregar]
(
	@id_costos INT,
    @id_producto INT,
    @id_materia_prima INT,
	@desempeño varchar(100),
	@cantidad DECIMAL(18, 2),
    @dimension1 DECIMAL(18, 2),
	@dimension2 DECIMAL(18, 2),
	@dimension3 DECIMAL(18, 2),
    @cm DECIMAL(18, 2),
	@cantidad_desperdicio DECIMAL(18, 2),
	@desperdicio DECIMAL(18, 2),
	@total_cantidad DECIMAL(18, 2),
	@valor_unitario DECIMAL(18, 2),
	@valor_total DECIMAL(18, 8),
	@id_tipo_costo INT,
    @fecha DATE,
	@Editar bit
)
AS
BEGIN
	IF(@Editar = 0)
	BEGIN
		INSERT INTO [dbo].[Costos]
				   ([id_producto]
				   ,[id_materia_prima]
				   ,[desempeño]
				   ,[cantidad]
				   ,[dimension1]
				   ,[dimension2]
				   ,[dimension3]
				   ,[cm]
				   ,[cantidad_desperdicio]
				   ,[desperdicio]
				   ,[total_cantidad]
				   ,[valor_unitario]
				   ,[valor_total]
				   ,[id_tipo_costo]
				   ,[fecha])
			 VALUES
				   (@id_producto,
				   @id_materia_prima,
				   @desempeño,
				   @cantidad,
				   @dimension1,
				   @dimension2,
				   @dimension3,
				   @cm,
				   @cantidad_desperdicio,
				   @desperdicio,
				   @total_cantidad,
				   @valor_unitario,
				   @valor_total,
				   @id_tipo_costo,
				   @fecha)
	END
	ELSE
	BEGIN
		UPDATE [dbo].[Costos]
		SET [id_producto] = @id_producto
			  ,[id_materia_prima] = @id_materia_prima	
			  ,[desempeño] = @desempeño
			  ,[cantidad] = @cantidad	
			  ,[dimension1] = @dimension1
			  ,[dimension2] = @dimension2
			  ,[dimension3] = @dimension3
			  ,[cm] = @cm
			  ,[cantidad_desperdicio] = @cantidad_desperdicio
			  ,[desperdicio] = @desperdicio
			  ,[total_cantidad] = @total_cantidad
			  ,[valor_unitario] = @valor_unitario
			  ,[valor_total] = @valor_total
			  ,[id_tipo_costo] = @id_tipo_costo
			  ,[fecha] = @fecha
		WHERE id_costos = @id_costos
	END
END



ALTER PROCEDURE [dbo].[Costos_Eliminar]
    @id_costos INT
AS
BEGIN
    DELETE FROM Costos WHERE id_costos = @id_costos;
END;


ALTER PROCEDURE [dbo].[ObtenerCostosPorProducto]
    @id_producto INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        c.*,
        cmp.detalle_mp AS MateriaPrima
    FROM 
        Costos c
    INNER JOIN 
        CostosMateriasPrimas cmp ON c.id_materia_prima = cmp.id_materia_prima
    WHERE 
        c.id_producto = @id_producto
    ORDER BY
        CASE 
            WHEN c.id_tipo_costo = 1 THEN 0 -- Priorizar id_tipo_ccosto = 1
            WHEN c.id_tipo_costo = 3 THEN 2 -- Poner id_tipo_ccosto = 3 al final
            ELSE 1 -- Todos los demás valores
        END,
        MateriaPrima; -- Orden alfabético por MateriaPrima
END;


->FORMULARIO COSTO:

ALTER PROCEDURE [dbo].[Formulario_Costos_Agregar]
(
	@id_formulario_costos INT,
    @id_producto INT,
	@porcentaje_ganancia DECIMAL(18, 2),
    @utilidad DECIMAL(18, 2),
	@precio_fabrica DECIMAL(18, 2),
	@anotaciones varchar(150),
    @fecha DATE,
	@Editar bit
)
AS
BEGIN
	IF(@Editar = 0)
	BEGIN
		INSERT INTO [dbo].[FormularioCostos]
				   ([id_producto]
				   ,[porcentaje_ganancia]
				   ,[utilidad]
				   ,[precio_fabrica]
				   ,[anotaciones]
				   ,[fecha])
			 VALUES
				   (@id_producto,
				   @porcentaje_ganancia,
				   @utilidad,
				   @precio_fabrica,
				   @anotaciones,
				   @fecha)
	END
	ELSE
	BEGIN
		UPDATE [dbo].[FormularioCostos]
		SET [id_producto] = @id_producto
			  ,[porcentaje_ganancia] = @porcentaje_ganancia
			  ,[utilidad] = @utilidad	
			  ,[precio_fabrica] = @precio_fabrica
			  ,[anotaciones] = @anotaciones
			  ,[fecha] = @fecha
		WHERE id_formulario_costos = @id_formulario_costos
	END
END


-> MANO OBRA:



ALTER PROCEDURE [dbo].[ManoObra_Agregar]
(	
	@id_mano_obra int,
	@id_producto int,
    @id_tipo_mano_obra INT,
    @costo decimal(18,0),	
	@fecha date,
	@total_cantidad decimal(18,2),
	@valor_total decimal(18,2),
	@Editar bit
)
AS
BEGIN
	IF(@Editar = 0)
	BEGIN
		INSERT INTO [dbo].[ManoObra]
				   ([id_producto],
					[id_tipo_mano_obra] ,
					[costo],	
					[fecha],
					[total_cantidad],
					[valor_total])
			 VALUES
				   (@id_producto,
					@id_tipo_mano_obra ,
					@costo,	
					@fecha,
					@total_cantidad,
					@valor_total)
	END
	ELSE
	BEGIN
		UPDATE [dbo].[ManoObra]
		SET 		[id_producto] = @id_producto,
					[id_tipo_mano_obra] = @id_tipo_mano_obra ,
					[costo] = @costo,	
					[fecha] = @fecha,
					[total_cantidad] = @total_cantidad,
					[valor_total] =@valor_total
		WHERE id_mano_obra = @id_mano_obra
	END
END




ALTER PROCEDURE [dbo].[ManoObra_Eliminar]
    @id_mano_obra INT
AS
BEGIN
    DELETE FROM ManoObra WHERE id_mano_obra = @id_mano_obra;
END;



ALTER PROCEDURE [dbo].[ObtenerManoObraPorProducto]
    @id_producto INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        MO.*,
        TM.nombre_tipo
    FROM 
        ManoObra MO
    INNER JOIN
        TipoManoObra TM ON MO.id_tipo_mano_obra = TM.id_tipo_mano_obra
    WHERE 
        MO.id_producto = @id_producto
    ORDER BY
        CASE WHEN MO.id_tipo_mano_obra = 4 THEN 1 ELSE 0 END; -- Filas con id_tipo_mano_obra = 4 al final
END;



-> MATERIAS PRIMAS:


ALTER PROCEDURE [dbo].[MateriaPrima_Agregar]
(

	@detalle_mp VARCHAR(100),
    @id_materia_prima INT,
    @id_unidad_medida INT,
    @medida DECIMAL(18, 2),
    @valor DECIMAL(18, 2),
    @proveedor VARCHAR(100),
	@desperdicio_cantidad DECIMAL(18, 2),
    @fecha DATE,
    @comentarios VARCHAR(150),
	@Editar bit
)
AS
BEGIN
	IF(@Editar = 0)
	BEGIN
		INSERT INTO [dbo].[CostosMateriasPrimas]
				   ([detalle_mp]
				   ,[id_unidad_medida]
				   ,[medida]
				   ,[valor]
				   ,[proveedor]
				   ,[desperdicio_cantidad]
				   ,[fecha]
				   ,[comentarios])
			 VALUES
				   (@detalle_mp
				   ,@id_unidad_medida
				   ,@medida
				   ,@valor
				   ,@proveedor
				   ,@desperdicio_cantidad
				   ,@fecha
				   ,@comentarios)
	END
	ELSE
	BEGIN
		UPDATE [dbo].[CostosMateriasPrimas]
		SET [detalle_mp] = @detalle_mp
			  ,[id_unidad_medida] = @id_unidad_medida
			  ,[medida] = @medida
			  ,[valor] = @valor
			  ,[proveedor] = @proveedor
			  ,[desperdicio_cantidad] = @desperdicio_cantidad
			  ,[fecha] = @fecha
			  ,[comentarios] = @Comentarios
		WHERE id_materia_prima = @id_materia_prima
	END
END


ALTER PROCEDURE [dbo].[MateriaPrima_Eliminar]
    @id_materia_prima INT
AS
BEGIN
    DELETE FROM CostosMateriasPrimas WHERE id_materia_prima = @id_materia_prima;
END;



ALTER PROCEDURE [dbo].[Listar_MaterialId]
    @id_material INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT detalle_mp
    FROM CostosMateriasPrimas
    WHERE id_materia_prima = @id_material;
END;


ALTER PROCEDURE [dbo].[MateriaPrima_Listar]
AS
BEGIN
	SELECT * FROM CostosMateriasPrimas
END


ALTER PROCEDURE [dbo].[MateriaPrima_Listar_Actualizado]
AS
BEGIN
    SELECT cmp.*
    FROM CostosMateriasPrimas cmp
    INNER JOIN (
        SELECT detalle_mp, MAX(fecha) AS fecha
        FROM CostosMateriasPrimas
        GROUP BY detalle_mp
    ) AS ultima_fecha ON cmp.detalle_mp = ultima_fecha.detalle_mp AND cmp.fecha = ultima_fecha.fecha
END


-> PRODUCTO : 
ALTER PROCEDURE [dbo].[Producto_Agregar]
(	
    @id_producto INT,
    @referencia VARCHAR(100),
    @descripcion VARCHAR(150),
	@Editar bit
)
AS
BEGIN
    IF(@Editar = 0)
    BEGIN
        -- Verificar si ya existe la combinación de referencia y descripción
        IF NOT EXISTS (
            SELECT 1
            FROM [dbo].[Productos]
            WHERE [referencia] = @referencia
              AND [descripcion] = @descripcion
        )
        BEGIN
            -- Insertar si la combinación no existe
            INSERT INTO [dbo].[Productos]
                       ([referencia]
                       ,[descripcion])
                 VALUES
                       (@referencia
                       ,@descripcion)
        END
        ELSE
        BEGIN
            -- Devolver algún mensaje o manejar la situación de duplicados
            PRINT 'La combinación de referencia y descripción ya existe.'
        END
    END
    ELSE
    BEGIN
        -- Actualizar sin verificar duplicados (asumiendo que se permite la actualización)
        UPDATE [dbo].[Productos]
        SET [referencia] = @referencia
              ,[descripcion] = @descripcion
        WHERE id_producto = @id_producto
    END
END



ALTER PROCEDURE [dbo].[Producto_Eliminar]
    @id_producto INT
AS
BEGIN
    DELETE FROM Productos WHERE id_producto = @id_producto;
END;



ALTER PROCEDURE [dbo].[Producto_Listar]
AS
BEGIN
	SELECT * FROM Productos
END



ALTER PROCEDURE [dbo].[Listar_ProductoId]
    @id_producto INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT referencia, descripcion, costo
    FROM Productos
    WHERE id_producto = @id_producto;
END;


ALTER PROCEDURE [dbo].[Productos_Listar]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT id_producto, referencia + ' - ' + descripcion AS nombre
    FROM Productos;
END;


-> TIPO COSTO


ALTER PROCEDURE [dbo].[TipoCosto_Agregar]
(	
    @id_tipo_costo INT,
    @nombre VARCHAR(100),
    @Editar bit
)
AS
BEGIN
    IF(@Editar = 0)
    BEGIN
        -- Verificar si ya existe el nombre de tipo de mano de obra
        IF NOT EXISTS (
            SELECT 1
            FROM [dbo].[TipoCosto]
            WHERE [nombre] = @nombre
        )
        BEGIN
            -- Insertar si el nombre de tipo de mano de obra no existe
            INSERT INTO [dbo].[TipoCosto] ([nombre]) VALUES (@nombre)
        END
        ELSE
        BEGIN
            -- Lanzar una excepción o devolver algún código de error para indicar duplicados
            THROW 50001, 'El nombre de tipo de costo ya existe.', 1;
        END
    END
    ELSE
    BEGIN
        -- Actualizar sin verificar duplicados (asumiendo que se permite la actualización)
        UPDATE [dbo].[TipoCosto] SET [nombre] = @nombre WHERE id_tipo_costo = @id_tipo_costo
    END
END



ALTER PROCEDURE [dbo].[TipoCosto_Eliminar]
    @id_tipo_costo INT
AS
BEGIN
    DELETE FROM TipoCosto WHERE id_tipo_costo = @id_tipo_costo;
END;



ALTER PROCEDURE [dbo].[TipoCosto_Listar]
AS
BEGIN
	SELECT * FROM TipoCosto
END


ALTER PROCEDURE [dbo].[Listar_TipoCostoId]
    @id_tipo_costo INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT nombre
    FROM TipoCosto
    WHERE id_tipo_costo = @id_tipo_costo;
END;



ALTER PROCEDURE [dbo].[ObtenerTipoCostoPorId]
    @id_tipo_costo INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT nombre
    FROM TipoCosto
    WHERE id_tipo_costo = @id_tipo_costo;
END;



-> TIPO MANO OBRA:



ALTER PROCEDURE [dbo].[TipoManoObra_Agregar]
(	
    @id_tipo_mano_obra INT,
    @nombre_tipo VARCHAR(100),
    @Editar bit
)
AS
BEGIN
    IF(@Editar = 0)
    BEGIN
        -- Verificar si ya existe el nombre de tipo de mano de obra
        IF NOT EXISTS (
            SELECT 1
            FROM [dbo].[TipoManoObra]
            WHERE [nombre_tipo] = @nombre_tipo
        )
        BEGIN
            -- Insertar si el nombre de tipo de mano de obra no existe
            INSERT INTO [dbo].[TipoManoObra] ([nombre_tipo]) VALUES (@nombre_tipo)
        END
        ELSE
        BEGIN
            -- Lanzar una excepción o devolver algún código de error para indicar duplicados
            THROW 50001, 'El nombre de tipo de mano de obra ya existe.', 1;
        END
    END
    ELSE
    BEGIN
        -- Actualizar sin verificar duplicados (asumiendo que se permite la actualización)
        UPDATE [dbo].[TipoManoObra] SET [nombre_tipo] = @nombre_tipo WHERE id_tipo_mano_obra = @id_tipo_mano_obra
    END
END



ALTER PROCEDURE [dbo].[TipoManoObra_Eliminar]
    @id_tipo_mano_obra INT
AS
BEGIN
    DELETE FROM TipoManoObra WHERE id_tipo_mano_obra = @id_tipo_mano_obra;
END;



ALTER PROCEDURE [dbo].[ObtenerTipoManoObraPorId]
    @id_tipo_mano_obra INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT nombre_tipo
    FROM TipoManoObra
    WHERE id_tipo_mano_obra = @id_tipo_mano_obra;
END;




ALTER PROCEDURE [dbo].[TipoManoObra_Listar]
AS
BEGIN
	SELECT * FROM TipoManoObra
END


-> UNIDADES DE MEDIDA



ALTER PROCEDURE [dbo].[UnidadMedida_Agregar]
(
    @id_unidad_medida INT,
	@nombre VARCHAR(100),
    @cantidad_parametros INT,
	@Editar bit
)
AS
BEGIN
	IF(@Editar = 0)
	BEGIN
		INSERT INTO [dbo].[UnidadesMedida]
				   ([nombre]
				   ,[cantidad_parametros])
			 VALUES
				   (@nombre
				   ,@cantidad_parametros)
	END
	ELSE
	BEGIN
		UPDATE [dbo].[UnidadesMedida]
		SET [nombre] = @nombre
			  ,[cantidad_parametros] = @cantidad_parametros
			  
		WHERE id_unidad_medida = @id_unidad_medida
	END
END



ALTER PROCEDURE [dbo].[UnidadMedida_Eliminar]
    @id_unidad_medida INT
AS
BEGIN
    DELETE FROM UnidadesMedida WHERE id_unidad_medida = @id_unidad_medida;
END;




ALTER PROCEDURE [dbo].[UnidadesMedida_Listar]
AS
BEGIN
    SELECT * FROM UnidadesMedida
    ORDER BY nombre ASC; -- Ordenar alfabéticamente por el nombre de la unidad de medida
END






